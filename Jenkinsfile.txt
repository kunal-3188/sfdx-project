#!groovy
pipeline { 
   agent any
   tool { sfdx
   }

		checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/kunal-3188/sfdx-project.git']]])

			stage ('salesforce_Deploy') {
            		steps {
                		authSF()
                		salesforceDeploy()
                		}
            		}
        }


def salesforceDeploy() {
    
    def varsfdx = tool 'sfdx'
    rc2 = command "${varsfdx}/sfdx force:auth:sfdxurl:store -f authjenkinsci.txt -a targetEnvironment"
    if (rc2 != 0) {
       echo " 'SFDX CLI Authorization to target env has failed.'"
    }

def authSF() {
    echo 'SF Auth method'
    def SF_AUTH_URL
    echo env.BRANCH_NAME

    if ("${currentBuild.buildCauses}".contains("UserIdCause")) {
        def fields = env.getEnvironment()
        fields.each {
            key, value -> if("${key}".contains("${params.target_environment}")) { SF_AUTH_URL = "${value}"; }
        }
    }
    else if("${currentBuild.buildCauses}".contains("BranchEventCause")) {
        if(env.BRANCH_NAME == 'master' || env.CHANGE_TARGET == 'master') {
            SF_AUTH_URL = env.SFDX_DEV
        }
        else { // {PR} todo - better determine if its a PR env.CHANGE_TARGET?
            SF_AUTH_URL = env.SFDX_DEV
        }
    }

    echo SF_AUTH_URL
    writeFile file: 'authjenkinsci.txt', text: SF_AUTH_URL
    sh 'ls -l authjenkinsci.txt'
    sh 'cat authjenkinsci.txt'
    echo 'end sf auth method'
}
}